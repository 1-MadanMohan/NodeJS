═══════════════════════════════════════
🎯 𝗩𝗘𝗥𝗦𝗜𝗢𝗡𝗜𝗡𝗚 - 𝗤𝗨𝗜𝗖𝗞 𝗥𝗘𝗙𝗘𝗥𝗘𝗡𝗖𝗘 🎯
═══════════════════════════════════════

📌 𝗪𝗛𝗔𝗧 𝗜𝗦 𝗩𝗘𝗥𝗦𝗜𝗢𝗡𝗜𝗡𝗚?
Versioning assigns unique numbers to software or APIs to:
✅ Track changes
✅ Manage updates
✅ Ensure compatibility

──────────────────────────────
📦 𝗦𝗘𝗠𝗔𝗡𝗧𝗜𝗖 𝗩𝗘𝗥𝗦𝗜𝗢𝗡𝗜𝗡𝗚 (𝗦𝗲𝗺𝗩𝗲𝗿)
──────────────────────────────
🛠️ Format: 𝗠𝗔𝗝𝗢𝗥.𝗠𝗜𝗡𝗢𝗥.𝗣𝗔𝗧𝗖𝗛
🛠️ Example: 𝟮.𝟰.𝟭

🔹 MAJOR 👉 Breaking changes (⚡ incompatible)
🔹 MINOR 👉 New features (✨ compatible)
🔹 PATCH 👉 Bug fixes (🩹 compatible)

📢 Rules:
🔸 Increment MAJOR for incompatible changes.
🔸 Increment MINOR for backward-compatible features.
🔸 Increment PATCH for backward-compatible bug fixes.

──────────────────────────────
🌐 𝗔𝗣𝗜 𝗩𝗘𝗥𝗦𝗜𝗢𝗡𝗜𝗡𝗚 𝗘𝗫𝗔𝗠𝗣𝗟𝗘
──────────────────────────────
✅ GET /api/v1/users  → API Version 1
✅ GET /api/v2/users  → API Version 2

──────────────────────────────
📂 𝗣𝗔𝗖𝗞𝗔𝗚𝗘.𝗝𝗦𝗢𝗡 𝗩𝗘𝗥𝗦𝗜𝗢𝗡𝗜𝗡𝗚
──────────────────────────────
{
  "name": "my-app",
  "version": "1.3.2",
  "description": "Example project for versioning",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  }
}

──────────────────────────────
🌱 𝗚𝗜𝗧 𝗩𝗘𝗥𝗦𝗜𝗢𝗡𝗜𝗡𝗚
──────────────────────────────
📌 Create version tags:
git tag v1.0.0
git tag v2.0.0

📌 Push tags:
git push origin --tags

──────────────────────────────
🔎 𝗢𝗧𝗛𝗘𝗥 𝗩𝗘𝗥𝗦𝗜𝗢𝗡𝗜𝗡𝗚 𝗦𝗧𝗬𝗟𝗘𝗦
──────────────────────────────
📅 Calendar Versioning: 2025.06.24
🔢 Sequential Versioning: v1, v2, v3
📝 Commit-based Versioning: Git commit hash IDs

──────────────────────────────
💡 𝗪𝗛𝗬 𝗩𝗘𝗥𝗦𝗜𝗢𝗡𝗜𝗡𝗚 𝗜𝗦 𝗜𝗠𝗣𝗢𝗥𝗧𝗔𝗡𝗧
──────────────────────────────
✅ Tracks software evolution
✅ Prevents compatibility issues
✅ Manages dependencies clearly
✅ Supports easy upgrades and rollbacks
